Suppose you receive some data on students test results and your task is to write a program that outputs an average grade from all the tests based on the raw data. Before you can code this task, you need to consider two separate issues. First, how do you represent the given data in your app and second, how do you called the solution? Before you even start coding a solution, you need to think about how you will represent the data. In this video, you will learn about some of the JavaScript's most common data structures such as objects, arrays, maps and sets. A data structure is a way to organize data. For example, you could represent it as a string. However, it would be somewhat of a strange representation. You'd need to somehow extract the numbers from the string before performing calculations on them. Alternatively, you could represent it as several numbers, each number saved in a variable. Doing it this way you don't have to extract and convert strings to numbers. But is this the most efficient way of storing your apps data? Perhaps another approach would be to store all the grades in an array. This way of organizing your data is even more efficient. It involves less typing and we're grouping related data together under a single label. You may recall the many benefits of using a arrays. But what is important here is that you understand how you code a solution to a given task depends on how you structure your data. In other words, a solution to a coding task depends on the data structure you use. JavaScript is somewhat limited in the types of data structures available compared to other programming languages, such as, Java or Python. However, some of the most common that you will encounter are objects arrays, maps and sets. You may be familiar with some of these already. Let's explore each briefly. Now you may recall that an object is unaltered, noniterable collection of key value pairs and you use objects when you need to store and later access a value under a key. An example of using this data structure is when you need to write object orientated, R00P code. Similarly, you may also recall an array which is an ordered iterable collection of values. Likewise, you use arrays when you need to store and later access a value under an index. And remember, we do not specify the index, JavaScript does this automatically. You only use the index to access the specific value stored in the array. When working with arrays, it's common to use a loop, such as a for loop to access and edit the data. For example, to find the average grade for the task earlier, you could loop over the array and calculate the total sum. Then after the for loop, calculate the average by dividing the sum by the length of the array. The next data structure is map which is like an array because it's iterable. However, it consists of key value pairs. It's important not to confuse a map with an object. With maps any value can be used as a key. With objects, keys can only be strings or symbols.
Play video starting at :3:31 and follow transcript3:31
Finally, the last data structure I want you to know about is a set. This is another collection where each item in the collection must be unique. For example, if you try to add a non unique item to a set, this operation will simply not be run. In other words, no errors will be thrown and no updates will be made to a set. In this video, you learned about some of JavaScript's most common data structures, such as, objects, arrays, maps and sets, which one you need to use depends on the task at hand. Next time you have a coding task, try to think of the data structures you might use.